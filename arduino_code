#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <TinyGPS++.h>
#include <SoftwareSerial.h>

// Define the GPS serial connection
SoftwareSerial gpsSerial(6, 7); // RX, TX
unsigned char buffer[256]; // buffer array for data recieve over serial port
int count=0;
static const uint32_t GPSBaud = 9600;

// Create an instance of the TinyGPS++ object
TinyGPSPlus gps;

// Create an instance of the LiquidCrystal_I2C object
LiquidCrystal_I2C lcd(0x20, 16, 2); // I2C address 0x20, 16 column and 2 rows

// Define the relay pin
const int relayPin = 0;

// Define the push button pin
const int buttonPin = 8;

// Define the target destination coordinates
const double targetLatitude = 42.277560; // Replace with your target latitude
const double targetLongitude = -83.740880; // Replace with your target longitude

// Define the distance threshold in meters (10 yards = 9.144 meters)
const double distanceThreshold = 9.144;

void setup() {
  // Initialize the serial communication
  Serial.begin(9600);
  gpsSerial.begin(9600);
  
  // Initialize the LCD
  lcd.init();
  lcd.backlight();
  
  // Initialize the relay pin
  pinMode(relayPin, OUTPUT);
  digitalWrite(relayPin, LOW);
  
  // Initialize the button pin
  pinMode(buttonPin, INPUT_PULLUP);
  
  // Display initial message
  lcd.clear();
  lcd.print("Press button");
  lcd.setCursor(0, 1);
  lcd.print("to start");
  delay(10000);
}

void loop() {
  // Check if the button is pressed
  if (digitalRead(buttonPin) == LOW) {
    // Process GPS data
    while (gpsSerial.available() > 0) {
      gps.encode(gpsSerial.read());
    }
    
    // Check if GPS data is valid
    if (gps.location.isValid()) {
      Serial.print("GPSisValid");
      // Get the current coordinates
      double currentLatitude = gps.location.lat();
      double currentLongitude = gps.location.lng();
      // Define the target destination coordinates
      const double targetLatitude = 42.277560; // Replace with your target latitude
      const double targetLongitude = -83.740880; // Replace with your target longitude

      // Calculate the distance to the target destination
      double distance = gps.distanceBetween(currentLatitude, currentLongitude, targetLatitude, targetLongitude);
      String Distance = String(distance);
      String CurrentLatitude = String(currentLatitude);
      String CurrentLongitude = String(currentLongitude);
      String TargetLatitude = String(targetLatitude);
      String TargetLongitude = String(targetLongitude);
      Serial.print("current distance : " + Distance);
      Serial.print("current latitude : " + CurrentLatitude);
      Serial.print("current logitude : " + CurrentLongitude);
      Serial.print("target latitude : " + TargetLatitude);
      Serial.print("target longitude : " + TargetLongitude);
      delay(1000);

      // Display the distance on the LCD
      lcd.clear();
      lcd.print("Distance:");
      lcd.setCursor(0, 1);
      lcd.print(distance);
      lcd.print(" m");
      delay(5000);
      
      // Check if the distance is within the threshold
      if (distance <= distanceThreshold) {
        // Open the latch
        digitalWrite(relayPin, HIGH);
        lcd.clear();
        lcd.print("UNLOCKED!!!");
      } else {
        // Keep the latch closed
        digitalWrite(relayPin, LOW);
      }
    } else {
      Serial.print("GPS error");
      // Display GPS error message
      lcd.clear();
      lcd.print("GPS error");
    }
  } else {
    // Turn off the display if the button is not pressed
    lcd.clear();
    lcd.noBacklight();
  }
}
